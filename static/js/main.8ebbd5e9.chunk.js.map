{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api.js","components/CurrentUser/CurrentUser.jsx","components/TodoForm/TodoForm.jsx","App.jsx","index.js"],"names":["TodoList","todos","getCurrentUserId","selectedUserId","className","map","todo","completed","key","id","title","type","readOnly","checked","userId","Math","ceil","random","onClick","defaultProps","PropTypes","arrayOf","shape","httpRequest","apiElement","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","this","props","users","setState","data","prevProps","name","email","phone","clearUser","React","PureComponent","TodoForm","onChangeHandler","onSelectHandler","inputValue","placeholder","value","onChange","event","App","isSelected","selectedTodos","initialTodos","currUserId","statusType","target","filter","filteredTodos","includes","Component","ReactDOM","render","document","getElementById"],"mappings":"wXAIaA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,iBAAkBC,EAA5B,EAA4BA,eAA5B,OACtB,yBAAKC,UAAU,YACb,sCAEA,yBAAKA,UAAU,4BACb,wBAAIA,UAAU,kBACXH,EAAMI,KAAI,SAAAC,GAAI,OACb,wBAAIF,UACFE,EAAKC,UACD,yCACA,2CAEFC,IAAKF,EAAKG,IAEZ,2BAAOD,IAAKF,EAAKI,OAEbJ,EAAKC,UACD,2BAAOI,KAAK,WAAWC,UAAQ,EAACC,SAAO,IACvC,2BAAOF,KAAK,WAAWC,UAAQ,IAErC,2BAAIN,EAAKI,QAGX,4BACEN,UACED,IAAmBG,EAAKQ,OAEpB,+DACA,+BAENH,KAAK,SACLH,IAAKF,EAAKQ,OAASC,KAAKC,KAAqB,IAAhBD,KAAKE,UAClCC,QAAS,kBAAMhB,EAAiBI,EAAKQ,UATvC,WAYGR,EAAKQ,gBAoBpBd,EAASmB,aAAe,CACtBhB,eAAgB,KAChBF,MAAOmB,IAAUC,QAAQD,IAAUE,MAAM,CACvCf,UAAW,S,MC5DR,SAASgB,EAAYC,GAC1B,OAAOC,MAHQ,kCAGSD,GACrBE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,U,ICgDPC,E,4MAnDbC,MAAQ,CACNC,KAAM,I,kEAGa,IAAD,OAClBZ,EAAY,SAAD,OAAUa,KAAKC,MAAMvB,SAC7BY,MAAK,SAAAY,GAAK,OAAI,EAAKC,SAAS,CAC3BJ,KAAMG,EAAME,Y,yCAICC,GAAY,IAAD,OACxBL,KAAKC,MAAMvB,SAAW2B,EAAU3B,QAClCS,EAAY,SAAD,OAAUa,KAAKC,MAAMvB,SAC7BY,MAAK,SAAAY,GAAK,OAAI,EAAKC,SAAS,CAC3BJ,KAAMG,EAAME,Y,+BAKV,IAAD,EAC4BJ,KAAKF,MAAMC,KAAtCO,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,MAAOnC,EADrB,EACqBA,GAE5B,OACE,yBAAKL,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEGK,IAGL,wBAAIL,UAAU,qBAAqBsC,GACnC,uBAAGtC,UAAU,sBAAsBuC,GACnC,uBAAGvC,UAAU,sBAAsBwC,GACnC,4BACExC,UAAU,2BACVc,QAASkB,KAAKC,MAAMQ,UACpBlC,KAAK,UAHP,c,GAnCkBmC,IAAMC,eC4CjBC,EA9CE,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,gBAAiBC,EAArC,EAAqCA,WAArC,OACf,yBAAK/C,UAAU,WACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SACb,uCAEE,2BACEgD,YAAY,mBACZzC,KAAK,OACL0C,MAAOF,EACPG,SAAU,SAAAC,GAAK,OAAIN,EAAgBM,QAIzC,yBAAKnD,UAAU,SACb,+CAEE,4BACEkD,SAAU,SAAAC,GAAK,OAAIL,EAAgBK,KAEnC,4BACEF,MAAM,OADR,OAKA,4BACEA,MAAM,UADR,UAKA,4BACEA,MAAM,aADR,mBCiFGG,E,4MAzGbtB,MAAQ,CACNjC,MAAO,GACPwD,YAAY,EACZC,cAAe,GACfvD,eAAgB,KAChBgD,WAAY,I,EAGdQ,aAAe,G,EAYfzD,iBAAmB,SAAC0D,GAClB,EAAKrB,SAAS,CACZpC,eAAgByD,K,EAIpBV,gBAAkB,SAACK,GACjB,EAAKhB,SACH,CAACkB,YAAY,IAFY,IAGnBE,EAAiB,EAAKzB,MAAtByB,aACFE,EAAaN,EAAMO,OAAOT,MACb,cAAfQ,GACF,EAAKtB,SAAS,CACZtC,MAAO0D,EAAaI,QAAO,SAAAzD,GAAI,OAAuB,IAAnBA,EAAKC,aACxCmD,cAAeC,EAAaI,QAAO,SAAAzD,GAAI,OAAuB,IAAnBA,EAAKC,aAChDkD,YAAY,IAIG,WAAfI,GACF,EAAKtB,SAAS,CACZtC,MAAO0D,EAAaI,QAAO,SAAAzD,GAAI,OAAuB,IAAnBA,EAAKC,aACxCmD,cAAeC,EAAaI,QAAO,SAAAzD,GAAI,OAAuB,IAAnBA,EAAKC,aAChDkD,YAAY,IAIG,QAAfI,GACF,EAAKtB,SAAS,CACZtC,MAAM,YAAK0D,GACXF,YAAY,K,EAKlBZ,UAAY,WACV,EAAKN,SAAS,CACZpC,eAAgB,Q,EAIpB8C,gBAAkB,SAACM,GAAW,IAAD,EACqC,EAAKrB,MAA7DiB,EADmB,EACnBA,WAAYQ,EADO,EACPA,aAAcF,EADP,EACOA,WAAYC,EADnB,EACmBA,cAC9C,EAAKnB,SAAS,CAAEY,WAAYI,EAAMO,OAAOT,QACzC,IAAMW,GAAiBP,EAAaC,EAAgBC,GACjDI,QAAO,SAAAzD,GAAI,OAAIA,EAAKI,MAAMuD,SAASd,MAEtC,EAAKZ,SAAS,CACZtC,MAAO+D,K,kEA1DU,IAAD,OAClBzC,EAAY,SACTG,MAAK,SAAAzB,GAAK,OAAI,EAAKsC,SAAS,CAC3BoB,aAAc1D,EAAMuC,KACjBuB,QAAO,SAAAzD,GAAI,OAAIA,EAAKI,OAASJ,EAAKQ,UACrCb,MAAOA,EAAMuC,KACVuB,QAAO,SAAAzD,GAAI,OAAIA,EAAKI,OAASJ,EAAKQ,iB,+BAwDjC,IAAD,EAC2BsB,KAAKF,MAA/BjC,EADD,EACCA,MAAOE,EADR,EACQA,eAEf,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACE6C,gBAAiBb,KAAKa,gBACtBC,gBAAiBd,KAAKc,gBACtBC,WAAYf,KAAKF,MAAMiB,aAEzB,kBAAC,EAAD,CACElD,MAAOA,EACPC,iBAAkBkC,KAAKlC,iBACvBC,eAAgBiC,KAAKF,MAAM/B,kBAI/B,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,0BACZD,EACC,kBAAC,EAAD,CACEW,OAAQsB,KAAKF,MAAM/B,eACnB0C,UAAWT,KAAKS,YAEhB,0B,GAlGEC,IAAMoB,WCJxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8ebbd5e9.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({ todos, getCurrentUserId, selectedUserId }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li className={\n            todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'\n          }\n              key={todo.id}\n          >\n            <label key={todo.title}>\n              {\n                todo.completed\n                  ? <input type=\"checkbox\" readOnly checked />\n                  : <input type=\"checkbox\" readOnly />\n              }\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={\n                selectedUserId === todo.userId\n                  // eslint-disable-next-line max-len\n                  ? 'TodoList__user-button TodoList__user-button--selected button'\n                  : 'TodoList__user-button button'\n              }\n              type=\"button\"\n              key={todo.userId * Math.ceil(Math.random() * 100)}\n              onClick={() => getCurrentUserId(todo.userId)}\n            >\n              UserId #\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  })),\n  getCurrentUserId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number,\n};\n\nTodoList.defaultProps = {\n  selectedUserId: null,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: null,\n  })),\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport function httpRequest(apiElement) {\n  return fetch(BASE_URL + apiElement)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { httpRequest } from '../api';\n\nclass CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    httpRequest(`users/${this.props.userId}`)\n      .then(users => this.setState({\n        user: users.data,\n      }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      httpRequest(`users/${this.props.userId}`)\n        .then(users => this.setState({\n          user: users.data,\n        }));\n    }\n  }\n\n  render() {\n    const { name, email, phone, id } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          className=\"fluid negative ui button\"\n          onClick={this.props.clearUser}\n          type=\"button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n\nexport default CurrentUser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoForm = ({ onChangeHandler, onSelectHandler, inputValue}) => (\n  <div className=\"ui form\">\n    <div className=\"two fields\">\n      <div className=\"field\">\n        <label>\n          Title\n          <input\n            placeholder=\"Enter task title\"\n            type=\"text\"\n            value={inputValue}\n            onChange={event => onChangeHandler(event)}\n          />\n        </label>\n      </div>\n      <div className=\"field\">\n        <label>\n          Select status\n          <select\n            onChange={event => onSelectHandler(event)}\n          >\n            <option\n              value=\"all\"\n            >\n              All\n            </option>\n            <option\n              value=\"active\"\n            >\n              Active\n            </option>\n            <option\n              value=\"completed\"\n            >\n              Completed\n            </option>\n          </select>\n        </label>\n      </div>\n    </div>\n  </div>\n);\n\nTodoForm.propTypes = {\n  onChangeHandler: PropTypes.func.isRequired,\n  onSelectHandler: PropTypes.func.isRequired,\n};\nexport default TodoForm;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport CurrentUser from './components/CurrentUser/CurrentUser';\nimport { httpRequest } from './components/api';\nimport TodoForm from './components/TodoForm/TodoForm';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    isSelected: false,\n    selectedTodos: [],\n    selectedUserId: null,\n    inputValue: '',\n  };\n\n  initialTodos = [];\n\n  componentDidMount() {\n    httpRequest('todos')\n      .then(todos => this.setState({\n        initialTodos: todos.data\n          .filter(todo => todo.title && todo.userId),\n        todos: todos.data\n          .filter(todo => todo.title && todo.userId),\n      }));\n  }\n\n  getCurrentUserId = (currUserId) => {\n    this.setState({\n      selectedUserId: currUserId,\n    });\n  }\n\n  onSelectHandler = (event) => {\n    this.setState(\n      {isSelected: true });\n    const { initialTodos } = this.state;\n    const statusType = event.target.value;\n    if (statusType === 'completed') {\n      this.setState({\n        todos: initialTodos.filter(todo => todo.completed === true),\n        selectedTodos: initialTodos.filter(todo => todo.completed === true),\n        isSelected: true,\n      });\n    }\n\n    if (statusType === 'active') {\n      this.setState({\n        todos: initialTodos.filter(todo => todo.completed === false),\n        selectedTodos: initialTodos.filter(todo => todo.completed === false),\n        isSelected: true,\n      });\n    }\n\n    if (statusType === 'all') {\n      this.setState({\n        todos: [...initialTodos],\n        isSelected: false,\n      });\n    }\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: null,\n    });\n  }\n\n  onChangeHandler = (event) => {\n    const { inputValue, initialTodos, isSelected, selectedTodos } = this.state;\n    this.setState({ inputValue: event.target.value });\n    const filteredTodos = (isSelected ? selectedTodos : initialTodos)\n      .filter(todo => todo.title.includes(inputValue));\n\n    this.setState({\n      todos: filteredTodos,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoForm\n            onChangeHandler={this.onChangeHandler}\n            onSelectHandler={this.onSelectHandler}\n            inputValue={this.state.inputValue}\n          />\n          <TodoList\n            todos={todos}\n            getCurrentUserId={this.getCurrentUserId}\n            selectedUserId={this.state.selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={this.state.selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}