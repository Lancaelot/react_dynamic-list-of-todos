{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api.js","components/CurrentUser/CurrentUser.jsx","components/TodoForm/TodoForm.jsx","App.jsx","index.js"],"names":["TodoList","todos","getCurrentUserId","selectedUserId","className","map","todo","completed","key","id","title","type","readOnly","checked","userId","Math","ceil","random","onClick","defaultProps","PropTypes","arrayOf","shape","getAll","apiElement","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","this","props","setState","data","prevProps","name","email","phone","clearUser","React","PureComponent","TodoForm","onChangeHandler","onSelectHandler","placeholder","onChange","event","value","App","initialTodos","currUserId","statusType","target","currState","filter","searchElement","filteredTodos","includes","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6646159.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({ todos, getCurrentUserId, selectedUserId }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li className={\n            todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'\n          }\n              key={todo.id}\n          >\n            <label key={todo.title}>\n              {\n                todo.completed\n                  ? <input type=\"checkbox\" readOnly checked />\n                  : <input type=\"checkbox\" readOnly />\n              }\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={\n                selectedUserId === todo.userId\n                  // eslint-disable-next-line max-len\n                  ? 'TodoList__user-button TodoList__user-button--selected button'\n                  : 'TodoList__user-button button'\n              }\n              type=\"button\"\n              key={todo.userId * Math.ceil(Math.random() * 100)}\n              onClick={() => getCurrentUserId(todo.userId)}\n            >\n              UserId #\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  })),\n  getCurrentUserId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number,\n};\n\nTodoList.defaultProps = {\n  selectedUserId: null,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: null,\n  })),\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport function getAll(apiElement) {\n  return fetch(BASE_URL + apiElement)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getAll } from '../api';\n\nclass CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getAll(`users/${this.props.userId}`)\n      .then(user => this.setState({\n        user: user.data,\n      }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      getAll(`users/${this.props.userId}`)\n        .then(user => this.setState({\n          user: user.data,\n        }));\n    }\n  }\n\n  render() {\n    const { name, email, phone, id } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          className=\"fluid negative ui button\"\n          onClick={this.props.clearUser}\n          type=\"button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n\nexport default CurrentUser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoForm = ({ onChangeHandler, onSelectHandler }) => (\n  <div className=\"ui form\">\n    <div className=\"two fields\">\n      <div className=\"field\">\n        <label>\n          Title\n          <input\n            placeholder=\"Enter task title\"\n            type=\"text\"\n            onChange={event => onChangeHandler(event)}\n          />\n        </label>\n      </div>\n      <div className=\"field\">\n        <label>\n          Select status\n          <select onChange={event => onSelectHandler(event)}>\n            <option\n              value=\"all\"\n            >\n              All\n            </option>\n            <option\n              value=\"active\"\n            >\n              Active\n            </option>\n            <option\n              value=\"completed\"\n            >\n              Completed\n            </option>\n          </select>\n        </label>\n      </div>\n    </div>\n  </div>\n);\n\nTodoForm.propTypes = {\n  onChangeHandler: PropTypes.func.isRequired,\n  onSelectHandler: PropTypes.func.isRequired,\n};\nexport default TodoForm;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport CurrentUser from './components/CurrentUser/CurrentUser';\nimport { getAll } from './components/api';\nimport TodoForm from './components/TodoForm/TodoForm';\n\nclass App extends React.Component {\n  state = {\n    initialTodos: [],\n    todos: [],\n    selectedUserId: null,\n  };\n\n  componentDidMount() {\n    getAll('todos')\n      .then(todos => this.setState({\n        initialTodos: todos.data\n          .filter(todo => todo.title && todo.userId),\n        todos: todos.data\n          .filter(todo => todo.title && todo.userId),\n      }));\n  }\n\n  getCurrentUserId = (currUserId) => {\n    this.setState({\n      selectedUserId: currUserId,\n    });\n  }\n\n  onSelectHandler = (event) => {\n    const statusType = event.target.value;\n    const currState = [...this.state.initialTodos];\n\n    if (statusType === 'completed') {\n      this.setState({\n        todos: currState.filter(todo => todo.completed === true),\n      });\n    }\n\n    if (statusType === 'active') {\n      this.setState({\n        todos: currState.filter(todo => todo.completed === false),\n      });\n    }\n\n    if (statusType === 'all') {\n      this.setState({\n        todos: [...currState],\n      });\n    }\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: null,\n    });\n  }\n\n  onChangeHandler = (event) => {\n    // eslint-disable-next-line no-unused-vars\n    const searchElement = event.target.value;\n    const filteredTodos = [...this.state.initialTodos]\n      .filter(todo => todo.title.includes(searchElement));\n\n    this.setState({\n      todos: filteredTodos,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoForm\n            onChangeHandler={this.onChangeHandler}\n            onSelectHandler={this.onSelectHandler}\n          />\n          <TodoList\n            todos={todos}\n            getCurrentUserId={this.getCurrentUserId}\n            selectedUserId={this.state.selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={this.state.selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}